services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: monitoring_db
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: dbpassword
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./config/mysql:/etc/mysql/conf.d
      - ./sql-scripts:/docker-entrypoint-initdb.d
    networks:
      - monitoring_network
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring_network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./config/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    depends_on:
      - prometheus
    networks:
      - monitoring_network
    restart: unless-stopped

  # Сервіс авторизації
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: mysql+pymysql://dbuser:dbpassword@mysql:3306/monitoring_db
      JWT_SECRET: your_jwt_secret_key_here
    depends_on:
      - mysql
    volumes:
      - ./auth-service:/app
    networks:
      - monitoring_network
    restart: unless-stopped

  # Симулятор активності користувачів
  user-simulator:
    build: ./user-simulator
    container_name: user_simulator
    depends_on:
      - auth-service
    volumes:
      - ./user-simulator:/app
    networks:
      - monitoring_network
    restart: unless-stopped

networks:
  monitoring_network:
    driver: bridge

volumes:
  mysql_data:
  prometheus_data:
  grafana_data: